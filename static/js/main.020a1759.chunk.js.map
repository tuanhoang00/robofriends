{"version":3,"sources":["components/Card.js","serviceWorker.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/ErrorBoundry.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","Boolean","window","location","hostname","match","Cardlist","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","Component","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gMAiBeA,G,MAfF,SAACC,GAAU,IAChBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OAEC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,4BAAKF,GACL,2BAAIC,OCEYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCJSC,EAXE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGd,GAAIU,EAAOI,GAAGd,GAAIF,KAAMY,EAAOI,GAAGhB,KAAMC,MAAOW,EAAOI,GAAGf,WAE/E,OACC,6BACIY,I,4BCMSK,EAbG,SAAC,GAAgC,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aACjC,OACC,yBAAKjB,UAAU,OACd,2BACEA,UAAY,mCACZkB,KAAK,SAASC,YAAY,gBAC1BC,SAAYH,MCEFI,G,MARA,SAACzB,GACf,OACC,yBAAK0B,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpE7B,EAAM8B,YCqDKC,GCxDYC,Y,kDDO1B,aAAc,IAAD,8BACZ,gBAkBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAlB1C,EAAKC,MAAQ,CACZzB,OAAQ,GACRO,YAAa,IAJF,E,gEAQO,IAAD,OAClBmB,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKR,SAAS,CAACtB,OAAQ8B,S,+BAUjB,IAAD,EACyBC,KAAKN,MAA7BzB,EADD,EACCA,OAAQO,EADT,EACSA,YACVyB,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAAS7B,EAAY4B,kBAEtD,OAAKnC,EAAOqC,OAIT,yBAAK9C,UAAU,MACd,6CACA,kBAAC,EAAD,CAAWiB,aAAgBuB,KAAKX,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAUgC,MAPjB,2C,GA/BQb,cEElBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.020a1759.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = (props) =>{\n\tconst {name, email, id} = props;\n\treturn(\n\t\t\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?150x150`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\n\t\t);\n}\n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ( {robots}) => {\n\tconst cardComponent = robots.map((user, i) =>{\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n\t})\n\treturn(\n\t\t<div>\n  \t\t\t{cardComponent}  \t\t\t\n  \t\t</div>   \n  \t);\n}\n\nexport default Cardlist","import React from 'react'\n\nconst SearchBox = ({ searchfield, searchChange}) =>{\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t \tclassName = 'pa3 ba b--green bg-lightest-blue'\n\t\t\t \ttype='search' placeholder='search robots' \n\t\t\t \tonChange = {searchChange}\n\t\t\t \t/>\n\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox ","import React from 'react'\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{ overflowY :'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll","import React, { Component } from 'react'\nimport Cardlist from '../components/Cardlist'\n \nimport SearchBox from '../components/SearchBox'\nimport './App.css'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\t\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(users => {\n\t\t\t\tthis.setState({robots: users})\n\t\t\t});\n\t\t\t\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value})\n\n\t}\n\n\trender(){\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t})\n\t\tif (!robots.length) {\n\t\t\treturn <h1>Loading</h1>\n\t\t} else {\n\t\t\t\treturn(\n\t\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t<h1> Robo friends</h1>\n\t\t\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<Cardlist robots = {filteredRobots}/>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t\t</div>\n\t\t\n\t\t)\n\n\t\t}\n\t\n\t}\n\t\n}\n\nexport default App;","import React, { Component} from 'react'\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, infor){\n\t\tthis.setState({ hasError: true })\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Oooops. THat is not good </h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './components/Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nimport Cardlist from './components/Cardlist'\nimport App from './containers/App'\n\nReactDOM.render(\n  <React.StrictMode>\n \t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}